import numpy as np

def create_test_case():
    points_x = [k/32 for k in range(0,32)]
    points_y = [7*k/32 for k in range(0,32)]
    # Point Shift
    for i in range(len(points_x)):
        points_x[i] = round(points_x[i] % 1, 8)
        points_y[i] = round(points_y[i] % 1, 8)
    return points_x, points_y


def Bundschuh_Zhu_ChatGPT(points, area=(1.0, 1.0)):
    points = np.array(points)
    width, height = area

    # Filter points to include only those within the specified area
    points = points[(points[:, 0] <= width) & (points[:, 1] <= height) & (points[:, 0] >= 0) & (points[:, 1] >= 0)]
    N, d = points.shape

    if d != 2:
        raise ValueError("This function is designed for 2D points only.")

    # Sort points along each dimension
    sorted_points = [np.sort(points[:, i]) for i in range(d)]

    # Initialize discrepancy
    max_discrepancy = 0.0

    # Evaluate discrepancy at all point boundaries
    for i in range(N):
        # Compute the volume of the box [0, z) for the current point z
        z = points[i, :]
        box_volume = (z[0] / width) * (z[1] / height)

        # Count the points in the box [0, z)
        points_in_box = np.all(points <= z, axis=1).sum()
        empirical_density = points_in_box / N

        # Compute discrepancy for this point
        discrepancy = abs(empirical_density - box_volume)
        max_discrepancy = max(max_discrepancy, discrepancy)

    return round(max_discrepancy, 4)


def Bundschuh_Zhu_Algorithm(points_x, points_y):
    max_star_discrepancy = 0
    n = len(points_x)
    l_list = []
    for l in range(1, n): # =<
        k_list = [] 
        for k in range(0, l):
            k_list.append(max(abs(k/n - points_x[l]*points_y[k]), abs(k/n - points_x[l+1]*points_y[k+1])))
        l_list.append(max(k_list))
    return max(l_list)

if __name__ == "__main__":
    points_x, points_y = create_test_case()
    # This was to test code generated by ChatGPT
    points_for_CGPT = []
    for i in range(len(points_x)):
        points_for_CGPT.append([points_x[i], points_y[i]])
    print(points_y)
    print(Bundschuh_Zhu_ChatGPT(points_for_CGPT))
    Bundschuh_Zhu_Algorithm(points_x, points_y)

    
    